@book{knuth_1992,
	author = {Knuth, Donald E.},
	title = {{Literate Programming}},
	year = {1992},
	month = {Mar},
	isbn = {978-0-93707380-3},
	publisher = {Cambridge University Press},
	address = {Cambridge, England, UK}
}

@article{schulte_2012,
  author =       {Schulte, Eric and Davison, Dan and Dye, Thomas and
                  Dominik, Carsten},
  title =        {{A Multi-Language Computing Environment for Literate
                  Programming and Reproducible Research}},
  journal =      {Journal of Statistical Software},
  volume =       46,
  number =       1,
  pages =        {1--24},
  year =         2012,
  doi =          {10.18637/jss.v046.i03},
  url =          {https://doi.org/10.18637/jss.v046.i03},
  abstract =     {We present a new computing environment for authoring
                  mixed natural and computer language documents. In
                  this environment a single hierarchically-organized
                  plain text source file may contain a variety of
                  elements such as code in arbitrary programming
                  languages, raw data, links to external resources,
                  project management data, working notes, and text for
                  publication. Code fragments may be executed in situ
                  with graphical, numerical and textual output
                  captured or linked in the file. Export to LATEX,
                  HTML, LATEX beamer, DocBook and other formats
                  permits working reports, presentations and
                  manuscripts for publication to be generated from the
                  file. In addition, functioning pure code files can
                  be automatically extracted from the file. This
                  environment is implemented as an extension to the
                  Emacs text editor and provides a rich set of
                  features for authoring both prose and code, as well
                  as sophisticated project management capabilities.},
  issn =         {1548-7660},
  month =        {Jan},
}


@misc{munit,
	title = {{{$\mathrm{\mu}$}nit -- C Unit Testing Framework}},
	year = {2020},
	month = {Nov},
	note = {[Online; accessed 3. Mar. 2021]},
	url = {https://nemequ.github.io/munit/#about}
}

@article{burkatzki_2008,
  author = {Burkatzki, M. and Filippi, Claudia and Dolg, M.},
  title = {{Energy-consistent small-core pseudopotentials for 3d-transition metals adapted to quantum Monte Carlo calculations}},
  journal = {J. Chem. Phys.},
  volume = {129},
  number = {16},
  pages = {164115},
  year = {2008},
  month = {Oct},
  issn = {0021-9606},
  publisher = {American Institute of PhysicsAIP},
  doi = {10.1063/1.2987872},
}

@conference{Kluyver_2016,
	Author = {Thomas Kluyver and Benjamin Ragan-Kelley and Fernando P{\'e}rez and Brian Granger and Matthias Bussonnier and Jonathan Frederic and Kyle Kelley and Jessica Hamrick and Jason Grout and Sylvain Corlay and Paul Ivanov and Dami{\'a}n Avila and Safia Abdalla and Carol Willing},
	Booktitle = {Positioning and Power in Academic Publishing: Players, Agents and Agendas},
	Editor = {F. Loizides and B. Schmidt},
	Organization = {IOS Press},
	Pages = {87 - 90},
	Title = {Jupyter Notebooks -- a publishing format for reproducible computational workflows},
	Year = {2016}}

@article{poole_2020,
	author = {Poole, David and Galvez Vallejo, Jorge L. and Gordon, Mark S.},
	title = {{A New Kid on the Block: Application of Julia to Hartree{\textendash}Fock Calculations}},
	journal = {J. Chem. Theory Comput.},
	volume = {16},
	number = {8},
	pages = {5006--5013},
	year = {2020},
	month = {Aug},
	issn = {1549-9618},
	publisher = {American Chemical Society},
	doi = {10.1021/acs.jctc.0c00337}
}

@misc{orgmode,
	title = {{Org Mode}},
	year = {2021},
	month = {Jan},
	note = {[Online; accessed 10. Mar. 2021]},
	url = {https://orgmode.org}
}

@book{spack,
	author = {Gamblin, Todd and LeGendre, Matthew and Collette, Michael R. and Lee, Gregory L. and Moody, Adam and de Supinski, Bronis R. and Futral, Scott},
	title = {{The Spack package manager: bringing order to HPC software chaos}},
	journal = {Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis},
	year = {2015},
	month = {Nov},
	isbn = {978-1-45033723-6},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	doi = {10.1145/2807591.2807623}
}

@misc{autotools,
	title = {{Autotools, 2nd Edition}},
        author = {{John Calcote}},
	journal = {Penguin Random House Canada},
	year = {2021},
	month = {Mar},
	note = {[Online; accessed 11. Mar. 2021]},
	url = {https://www.penguinrandomhouse.ca/books/600402/autotools-2nd-edition-by-john-calcote/9781593279721}
}

@book{sycl,
	author = {Keryell, Ronan and Reyes, Ruyman and Howes, Lee},
	title = {{Khronos SYCL for OpenCL: a tutorial}},
	journal = {Proceedings of the 3rd International Workshop on OpenCL},
	year = {2015},
	month = {May},
	isbn = {978-1-45033484-6},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	doi = {10.1145/2791321.2791345}
}

@article{kokkos,
	author = {Carter Edwards, H. and Trott, Christian R. and Sunderland, Daniel},
	title = {{Kokkos}},
	journal = {J. Parallel Distrib. Comput.},
	volume = {74},
	number = {12},
	pages = {3202--3216},
	year = {2014},
	month = {Dec},
	issn = {0743-7315},
	publisher = {Academic Press, Inc.},
	doi = {10.1016/j.jpdc.2014.07.003}
}

@inproceedings{pohl_2016,
author = {Pohl, Angela and Cosenza, Biagio and Mesa, Mauricio Alvarez and Chi, Chi Ching and Juurlink, Ben},
title = {An Evaluation of Current SIMD Programming Models for C++},
year = {2016},
isbn = {9781450340601},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
doi = {10.1145/2870650.2870653},
abstract = {SIMD extensions were added to microprocessors in the mid '90s to speed-up data-parallel code by vectorization. Unfortunately, the SIMD programming model has barely evolved and the most efficient utilization is still obtained with elaborate intrinsics coding. As a consequence, several approaches to write efficient and portable SIMD code have been proposed. In this work, we evaluate current programming models for the C++ language, which claim to simplify SIMD programming while maintaining high performance.The proposals were assessed by implementing two kernels: one standard floating-point benchmark and one real-world integer-based application, both highly data parallel. Results show that the proposed solutions perform well for the floating point kernel, achieving close to the maximum possible speed-up. For the real-world application, the programming models exhibit significant performance gaps due to data type issues, missing template support and other problems discussed in this paper.},
booktitle = {Proceedings of the 3rd Workshop on Programming Models for SIMD/Vector Processing},
articleno = {3},
numpages = {8},
keywords = {vectorization, parallel programming, C++, programming model, SIMD},
location = {Barcelona, Spain},
series = {WPMVP '16}
}
